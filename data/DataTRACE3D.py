import sys
import numpy as np
import matplotlib.pyplot as plt
import sys
import os
sys.path.append(os.path.join('../'))
from lib.BeamDynamicsTools.Boundary import Boundary
from lib.BeamDynamicsTools.Bfield import Bfield, BfieldTF, BfieldVF
from lib.BeamDynamicsTools.Trajectory import Trajectory
from lib.BeamDynamicsTools.Beam import Beam
from lib.BeamDynamicsTools.Ellipse import Ellipse
import numpy as np
from matplotlib.pyplot import *
from numpy.linalg import inv
import numpy as np

# ==============================================================================
# ====== Convert 6x6 Basis Matrix to 3x3 Basis Matrix ==========================
# ==============================================================================


def ConverM6toM3(M6):
    i3 = [0, 1, 2]
    i6 = [0, 2, 4]
    M3 = np.matrix(np.zeros((3, 3), float))
    for i in i3:
        for j in i3:
            M3[i, j] = M6[i6[i], i6[j]]
    return M3

#BS3=[]; Bt3=[];
# for i in range(len(BS)):
#	BS3.append( ConverM6toM3(BS[i]) )
#	Bt3.append( ConverM6toM3(Bt[i]) )


# ==============================================================================
# ====== Convert from trace 3D modified Sigma to Standard Sigma Matrix =========
# ==============================================================================

Sigma0 = np.matrix([
    [0.5771000, 0.3980000, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.3980000, 171.8262, 0.000000, 0.000000, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.3439000, -.2715000, 0.000000, 0.000000],
    [0.000000, 0.000000, -.2715000, 238.3722, 0.000000, 0.000000],
    [0.000000, 0.000000, 0.000000, 0.000000, 1.297156, 2.343722],
    [0.000000, 0.000000, 0.000000, 0.000000, 2.343722, 134.9344]])


def ConvertT3D(MS, S0=Sigma0):
    S = np.zeros((6, 6), float)
# Calculate Diagonal Elements
    for i in range(6):
        S[i, i] = MS[i, 0]**2
    S[5, 5] = S[5, 5] * 100.0  # correct Units

# Calculate Off Diagonal Elements in the lower left triangle
    for i in range(6):
        for j in range(6):
            if i != j and i < 5:
                S[i, j] = MS[i + 1, j] * np.sqrt(S[i, i] * S[j, j])

# Copy lower right triangle to upper right to symmetrize
    for i in range(6):
        for j in range(6):
            S[j, i] = S[i, j]

    # calculate change
    dS = np.zeros((6, 6), float)
    for i in range(6):
        for j in range(6):
            if S0[i, j] != 0:
                dS[i, j] = (S[i, j] - S0[i, j]) / S0[i, j]
    return S, dS


Path0 = './sigma_trace3d/'

Sinjection = np.matrix([
    [2.8834, 0.000, 0.000, 0.0000, 0.000, 0.000],
    [3.4922, -0.154, 0.000, 0.0000, 0.000, 0.000],
    [3.7727, 0.000, 0.000, 0.0000, 0.000, 0.000],
    [5.5126, 0.000, 0.000, -0.9000, 0.000, 0.000],
    [5.8750, 0.000, 0.000, 0.0000, 0.000, 0.000],
    [1.2536, 0.000, 0.000, 0.0000, 0.000, 0.984]], float)

SinjectionLC = np.matrix([
    [2.9989, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [3.4066, -0.2140, 0.0000, 0.0000, 0.0000, 0.0000],
    [3.5736, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [5.8419, 0.0000, 0.0000, -0.9000, 0.0000, 0.0000],
    [5.5170, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    [1.1617, 0.0000, 0.0000, 0.0000, 0.0000, 0.9790]], float)

Bend90 = np.matrix([
    [6.2429, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.7663, 0.906, 0.000, 0.000, 0.000, 0.000],
    [13.8997, 0.000, 0.000, 0.000, 0.000, 0.000],
    [13.4632, 0.000, 0.000, 0.982, 0.000, 0.000],
    [18.8279, 0.000, 0.000, -0.869, -0.932, 0.000],
    [1.2944, 0.000, 0.000, -0.921, -0.960, 0.989]], float)


# Final Modified Sigma Matrices
# ==================================================================== 0000 A
S0000 = np.matrix([
    [5.9546, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.7470, 0.895, 0.000, 0.000, 0.000, 0.000],
    [4.9859, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.4023, 0.000, 0.000, 0.942, 0.000, 0.000],
    [24.8496, 0.000, 0.000, 0.000, 0.000, 0.000],
    [1.2935, 0.000, 0.000, 0.000, 0.000, 0.999]], float)

S0000LC = np.matrix([
    [5.3088, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.4066, 0.835, 0.000, 0.000, 0.000, 0.000],
    [5.6937, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.8423, 0.000, 0.000, 0.962, 0.000, 0.000],
    [22.7092, 0.000, 0.000, 0.000, 0.000, 0.000],
    [1.1616, 0.000, 0.000, 0.000, 0.000, 0.999]], float)

# ==================================================================== 1600 A
S1600 = np.matrix([
    [5.7018, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.9816, 0.899, 0.000, 0.000, 0.000, 0.000],
    [5.2000, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.4841, 0.000, 0.000, 0.894, 0.000, 0.000],
    [25.1032, 0.000, 0.000, 0.188, 0.473, 0.000],
    [1.2938, 0.000, 0.000, 0.215, 0.493, 0.999]], float)

# S1600NG=  np.matrix([
#[6.0420 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000],
#[3.7500 , 0.898 , 0.000 , 0.000 , 0.000 , 0.000],
#[5.1966 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000],
#[5.9436 , 0.000 , 0.000 , 0.912 , 0.000 , 0.000],
#[25.1022, 0.000 , 0.000 , 0.191 , 0.450 , 0.000],
# [1.2937 , 0.000 , 0.000 , 0.217 , 0.470 , 0.999]],float)

S1600NG = np.matrix([
    [6.3816, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.7599, 0.910, 0.000, 0.000, 0.000, 0.000],
    [5.6911, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.9285, 0.000, 0.000, 0.915, 0.000, 0.000],
    [26.2963, 0.000, 0.000, 0.170, 0.448, 0.000],
    [1.2944, 0.000, 0.000, 0.199, 0.472, 0.999]], float)

S1600LC = np.matrix([
    [5.0726, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.6450, 0.843, 0.000, 0.000, 0.000, 0.000],
    [5.8895, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.6828, 0.000, 0.000, 0.921, 0.000, 0.000],
    [22.9414, 0.000, 0.000, 0.137, 0.400, 0.000],
    [1.1616, 0.000, 0.000, 0.171, 0.429, 0.998]], float)

S1600NGH = np.matrix([
    [6.0681, 0.000, 0.000, 0.000, 0.000, 0.000],
    [4.5034, 0.794, 0.000, 0.000, 0.000, 0.000],
    [5.2285, 0.000, 0.000, 0.000, 0.000, 0.000],
    [5.4055, 0.000, 0.000, 0.945, 0.000, 0.000],
    [25.1140, 0.146, 0.594, 0.000, 0.000, 0.000],
    [1.2937, 0.186, 0.621, 0.000, 0.000, 0.998]], float)

# ==================================================================== 3200 A

S3120 = np.matrix([
    [5.5371, 0.000, 0.000, 0.000, 0.000, 0.000],
    [4.5848, 0.920, 0.000, 0.000, 0.000, 0.000],
    [5.4908, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.0884, 0.000, 0.000, 0.789, 0.000, 0.000],
    [25.2144, 0.000, 0.000, 0.357, 0.787, 0.000],
    [1.2941, 0.000, 0.000, 0.409, 0.813, 0.998]], float)

S3120 = np.matrix([
    [5.5371, 0.000, 0.000, 0.000, 0.000, 0.000],
    [4.5848, 0.920, 0.000, 0.000, 0.000, 0.000],
    [5.4908, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.0884, 0.000, 0.000, 0.789, 0.000, 0.000],
    [25.2144, 0.000, 0.000, 0.357, 0.787, 0.000],
    [1.2941, 0.000, 0.000, 0.409, 0.813, 0.998]], float)

S3120NG = np.matrix([
    [6.4777, 0.000, 0.000, 0.000, 0.000, 0.000],
    [3.7630, 0.913, 0.000, 0.000, 0.000, 0.000],
    [6.0167, 0.000, 0.000, 0.000, 0.000, 0.000],
    [7.1834, 0.000, 0.000, 0.856, 0.000, 0.000],
    [26.5075, 0.000, 0.000, 0.330, 0.722, 0.000],
    [1.2946, 0.000, 0.000, 0.384, 0.757, 0.998]], float)

# ==================================================================== 4450 A

S4450 = np.matrix([
    [6.0062, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.5468, 0.967, 0.000, 0.000, 0.000, 0.000],
    [6.2312, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.7172, 0.000, 0.000, 0.598, 0.000, 0.000],
    [26.1901, 0.000, 0.000, 0.546, 0.962, 0.000],
    [1.2951, 0.000, 0.000, 0.662, 0.961, 0.995]], float)

S4450NG = np.matrix([
    [6.0062, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.5468, 0.967, 0.000, 0.000, 0.000, 0.000],
    [6.2312, 0.000, 0.000, 0.000, 0.000, 0.000],
    [6.7172, 0.000, 0.000, 0.598, 0.000, 0.000],
    [26.1901, 0.000, 0.000, 0.546, 0.962, 0.000],
    [1.2951, 0.000, 0.000, 0.662, 0.961, 0.995]], float)


SigmaInj, dS = ConvertT3D(Sinjection)
SigmaInjLC, dS = ConvertT3D(SinjectionLC)
Sigma0000, dS = ConvertT3D(S0000)
Sigma0000LC, dS = ConvertT3D(S0000LC)
Sigma1600, dS = ConvertT3D(S1600)
Sigma1600LC, dS = ConvertT3D(S1600LC)
Sigma1600NG, dS = ConvertT3D(S1600NG)
Sigma3120, dS = ConvertT3D(S3120)
Sigma3120NG, dS = ConvertT3D(S3120NG)
Sigma4450, dS = ConvertT3D(S4450)
Sigma4450NG, dS = ConvertT3D(S4450NG)
SigmaBend90, dS = ConvertT3D(Bend90)

np.savetxt(Path0 + 'SigmaInjection.dat', SigmaInj)
np.savetxt(Path0 + 'SigmaInjectionLC.dat', SigmaInjLC)

np.savetxt(Path0 + 'Trace3DSigma_I_0.dat', Sigma0000)
np.savetxt(Path0 + 'Trace3DSigma_I_0LC.dat', Sigma0000LC)

np.savetxt(Path0 + 'Trace3DSigma_I_1600.dat', Sigma1600)
np.savetxt(Path0 + 'Trace3DSigma_I_1600LC.dat', Sigma1600LC)
np.savetxt(Path0 + 'Trace3DSigma_I_1600NG.dat', Sigma1600NG)

np.savetxt(Path0 + 'Trace3DSigma_I_3120.dat', Sigma3120)
np.savetxt(Path0 + 'Trace3DSigma_I_3120NG.dat', Sigma3120NG)

np.savetxt(Path0 + 'Trace3DSigma_I_4450.dat', Sigma4450)
np.savetxt(Path0 + 'Trace3DSigma_I_4450NG.dat', Sigma4450NG)


np.savetxt(Path0 + 'Trace3DSigmaBend90.dat', SigmaBend90)


if True:
    plt.figure(1, figsize=(8, 8))
    E0 = Ellipse(Sigma0000)
    E1 = Ellipse(Sigma0000LC)
    M = E0.MismatchFactor(E1, Type=1)

    subplot(2, 2, 1)
    E0.PlotXX1()
    E1.PlotXX1()
    text(0, 0, 'M=%0.4f' % M[1], va='center', ha='center', color='r', size=16)
    legend((r'1.000 mA', '0.001 mA'), loc=2)

    subplot(2, 2, 2)
    E0.PlotYY1()
    E1.PlotYY1()
    text(0, 0, 'M=%0.4f' % M[1], va='center', ha='center', color='r', size=16)

    subplot(2, 2, 3)
    E0.PlotZZ1()
    E1.PlotZZ1()
    text(0, 0, 'M=%0.4f' % M[2], va='center', ha='center', color='r', size=16)

    subplot(2, 2, 4)
    E0.PlotXY()
    E1.PlotXY()
    text(0, 0, 'M=%0.4f' % M[3], va='center', ha='center', color='r', size=16)

    suptitle(r'Space Charge Effects: 1mA versus 1$\mu$A', size=16)


show()
